# Helloworld Build and Deploy Pipeline
# Triggers only on push to the branch che 

# 1. Builds Atlas image, tags image with 'prod' and 'commit-sha', and pushes to ACR.
# 2. Create and run DB Migration script on the QA database
# 3. Deploy image to QA 

name: build_and_deploy_aks

on:
  push:
    branches:
      - che
# This is a basic workflow to help you get started with Actions

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      DOCKER_REPOSITORY: eche21 # name of Docker Hub ID
      IMAGE_NAME: demohelloworldapp
      IMAGE_TAG: ${{ github.run_number }} # $GITHUB_RUN_NUMBER
      
      CLUSTER_NAME: RegScale
      CLUSTER_RESOURCE_GROUP: Corporate
      NAMESPACE: demo-che
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    #- name: Setup .NET Core SDK
    #  uses: actions/setup-dotnet@v1.5.0
    #  with:
    #    # SDK version to use. Examples: 2.2.104, 3.1, 3.1.x
    #    dotnet-version: 3.1.x
        # Optional package source for which to set up authentication. Will consult any existing NuGet.config in the root of the repo and provide a temporary NuGet.config using the NUGET_AUTH_TOKEN environment variable as a ClearTextPassword
    #- name: dotnet build
    #  run: dotnet build -c release
    
    #
#
    - name: Build Docker Image
      run:
        docker build ./FirstApp/ --file ./FirstApp/Dockerfile --tag $DOCKER_REPOSITORY/$IMAGE_NAME:$GITHUB_RUN_NUMBER --build-arg=token=secrets.MYTOKEN --no-cache
#
#Login to Docker Hub, and push the image. We need username and password. These are
#provided as secrets and the secrets have been created and stored in Github
#DOCKER_REPOSITORY is the username
#DOCKERHUB_TOKEN is the secret for the password. The password will be passed to the variable stdin
#
    - name: Login to Docker Hub
      run: |
        echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u $DOCKER_REPOSITORY --password-stdin
#
#Push the image using docker push
#
    - name: Push Image to Docker Hub
      run:
        docker push $DOCKER_REPOSITORY/$IMAGE_NAME:$GITHUB_RUN_NUMBER

      
    - name: Azure Kubernetes set context
      uses: Azure/aks-set-context@v1
      with:
        # Azure credentials i.e. output of `az ad sp create-for-rbac --sdk-auth`
        creds: '${{secrets.AZURE_CREDENTIALS}}'
        # Resource Group Name
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
        # AKS Cluster Name
        cluster-name: ${{ env.CLUSTER_NAME }}

  # Create K8s secrets to pull images
    - name: Create secret in Kubernetes cluster
      uses: Azure/k8s-create-secret@v1.1
      with:
        # Container registry url
        container-registry-url: https://login.docker.com/u/login/identifier?state=hKFo2SBEQmtlUEg4MkJidXUtdWhKb2lwMFo4a2xFRUp4R2h0T6Fur3VuaXZlcnNhbC1sb2dpbqN0aWTZIHlYMVJYc3psbmlwM0pDd1M5UkJ5MEJWYzB1cExXLUtso2NpZNkgbHZlOUdHbDhKdFNVcm5lUTFFVnVDMGxiakhkaTluYjk
        # Container registry username
        container-registry-username: eche21
        # Container registry password
        container-registry-password:  '${{ secrets.DOCKERHUB_TOKEN }}'
        # Type of Kubernetes secret. For example, docker-registry or generic
        secret-type: docker-registry
        # Name of the secret. You can use this secret name in the Kubernetes YAML configuration file.
        secret-name: docker-image-pull-secret
        
      # Deploy to k8s cluster
    - name: Deploy to Kubernetes cluster
      uses: Azure/k8s-deploy@v1
      with:        
        # Path to the manifest files which will be used for deployment.
        manifests: |
          k8s/helloworld-deployment.azure.v2.yml
        #  k8s/service.yml
        # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
        images: '$DOCKER_REPOSITORY/$IMAGE_NAME:$GITHUB_RUN_NUMBER'
        #'${{secrets.DOCKER_LOGIN}}/githubactions-aks-demo:${{github.sha}}'
        # Name of a docker-registry secret that has already been set up within the cluster. Each of these secret names are added under imagePullSecrets field for the workloads found in the input manifest files
        imagepullsecrets: docker-image-pull-secret
        # deploy/promote/reject
        action: deploy
        
    
        
    